<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_grey</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar mouseClickX;
mouseClickX = 0;

globalvar mouseClickY;
mouseClickY = 0;

globalvar nOptions;
nOptions = 0;

//menu variables
globalvar menu_txt_arr;
globalvar menu_act_arr;
globalvar current_tile;
nOptions = 0

//influence variables

red_influence = 0
blue_influence = 0
grey_influence = 51
//building variables
building1 = 0

//AI Building variables
ai_building1 = 0

//current_tile = 0

//Get that adjacency son

adj_right = 0
adj_left = 0
adj_up = 0
adj_down = 0



adj_right = instance_position(id.x + 100, id.y, oTile2)
if adj_right == -4 
    adj_right = 100014
adj_left = instance_position(id.x + -100, id.y, oTile2)
if adj_left == -4 
    adj_left = 100014
adj_up = instance_position(id.x , id.y - 100, oTile2)
if adj_up == -4 
    adj_up = 100014
adj_down = instance_position(id.x , id.y + 100, oTile2)
if adj_down == -4 
    adj_down = 100014
    
//AI Tests
AI_favour = (id - 100000)/ 100

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Creates a menu when right clicking on a tile

if (mouse_check_button_pressed(mb_right) &amp;&amp;
        (mouse_x &gt; bbox_left &amp;&amp; mouse_x &lt; bbox_right &amp;&amp;
            mouse_y &gt; bbox_top &amp;&amp; mouse_y &lt; bbox_bottom)){

    mouseClickX = mouse_x;
    mouseClickY = mouse_y;
    instance_create(mouseClickX, mouseClickY, oMenu2);
    current_tile = id;
    
}    
// Dynamically generates the options for the menu depending on the tile clicked on

nOptions = 0;
if (current_tile.building1 &lt;= 4) &amp;&amp; (current_tile.adj_right.sprite_index=spr_red or current_tile.adj_down.sprite_index=spr_red or current_tile.adj_left.sprite_index=spr_red or current_tile.adj_up.sprite_index=spr_red) { 
        nOptions +=1
        menu_txt_arr[nOptions]="Building 1"
        menu_act_arr[nOptions]=scr_building1
        }


//commented sprite colour options - replacing with influence based colour changes

/*scr_options(spr_grey, "Turn Grey", scr_grey);
scr_options(spr_blue, "Turn Blue", scr_blue);
scr_options(spr_green, "Turn Green", scr_green);
//scr_options(spr_red, "Turn Red", scr_red);
if ((current_tile.sprite_index!=spr_red) &amp;&amp; (current_tile.adj_right.sprite_index=spr_red or current_tile.adj_down.sprite_index=spr_red or current_tile.adj_left.sprite_index=spr_red or current_tile.adj_up.sprite_index=spr_red)) { 
        nOptions +=1
        menu_txt_arr[nOptions]="Turn Red"
        menu_act_arr[nOptions]=scr_red
        }
*/



// Destroys the menu when clicking outside of it (this method is completely ridiculous)

if ((mouse_check_button_pressed(mb_any) 
        &amp;&amp; ((mouse_x &lt; mouseClickX || mouse_x &gt; (mouseClickX + (zoom * 110)))
            || (mouse_y &lt; mouseClickY || mouse_y &gt; (mouseClickY + nOptions * (zoom * 45) ))))
                || keyboard_check_pressed(vk_escape)){
    
    with(oMenu2)
        instance_destroy();
        
}


// AI tests
if (adj_up.sprite_index == spr_blue) or (adj_right.sprite_index == spr_blue) or (adj_down.sprite_index == spr_blue) or (adj_left.sprite_index == spr_blue)
AI_control = 1

else AI_control = 0




//Adjacecny Test - Blue tiles
if keyboard_check_pressed(vk_space) and (adj_up.sprite_index == spr_blue) and AI_control == 1 and AI ==0 and clicks = 0 {
AI_favour += 1
}

if keyboard_check_pressed(vk_space) and (adj_right.sprite_index == spr_blue) and AI_control == 1 and AI ==0 and clicks = 0 {
AI_favour += 1
}

if keyboard_check_pressed(vk_space) and (adj_down.sprite_index == spr_blue) and AI_control == 1 and AI ==0 and clicks = 0 {
AI_favour += 1
}

if keyboard_check_pressed(vk_space) and (adj_left.sprite_index == spr_blue) and AI_control == 1 and AI ==0 and clicks = 0 {
AI_favour += 1
}

//Adjacency red tiles
if keyboard_check_pressed(vk_space) and (adj_up.sprite_index == spr_red) and AI_control == 1 and AI ==0 and clicks = 0{
AI_favour += 2
}

if keyboard_check_pressed(vk_space) and (adj_right.sprite_index == spr_red)and AI_control == 1 and AI ==0 and clicks = 0 {
AI_favour += 2
}

if keyboard_check_pressed(vk_space) and (adj_down.sprite_index == spr_red)and AI_control == 1 and AI ==0 and clicks = 0{
AI_favour += 2
}

if keyboard_check_pressed(vk_space) and (adj_left.sprite_index == spr_red)and AI_control == 1 and AI ==0 and clicks = 0 {
AI_favour += 2
}

//IS it red

if keyboard_check_pressed(vk_space) and sprite_index=spr_red and AI_control == 1 and AI ==0 and clicks = 0 {
AI_favour +=3
}

//Is it Blue
if keyboard_check_pressed(vk_space) and sprite_index=spr_blue and AI_control == 1 and AI ==0 and clicks = 0 {
AI_favour +=2
}

//Adds it to the list of AI options

if ds_exists(AI_order, ds_type_priority) and ((keyboard_check_pressed(vk_enter)) or (keyboard_check_pressed(vk_space) and AI==0 and clicks == 0)) and AI_control = 1 and ai_building1 &lt;= 4
ds_priority_add(AI_order, id, AI_favour)

//influence changing colour
if red_influence &gt; 50
    sprite_index = spr_red
    
if blue_influence &gt; 50
    sprite_index = spr_blue
    
if grey_influence &gt; 50
    sprite_index = spr_grey    
//influence changing variables
red_influence_mod = (building1 * 10)

blue_influence_mod = (ai_building1 * 10)


if keyboard_check_pressed(vk_space) {
    red_influence = red_influence + red_influence_mod - 4
        
        if red_influence &lt; 0 {
            red_influence = 0
            }
            
    blue_influence = blue_influence + blue_influence_mod - 4
        
        if blue_influence &lt; 0 {
            blue_influence = 0
            }
            
    grey_influence = grey_influence + (grey_influence/100)
    influence_total = grey_influence + blue_influence + red_influence
    influence_mod = 100 / influence_total
    red_influence = red_influence * influence_mod
    blue_influence = blue_influence * influence_mod
    grey_influence = grey_influence * influence_mod
   }  
    
    
/*if blue_influence &lt; 0
    blue_influence = 0
    
if red_influence &lt; 0
    red_influence = 0*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(id.x, id.y - 40, AI_favour)
draw_text(id.x, id.y - 20, grey_influence)
draw_text(id.x, id.y, red_influence)
draw_text(id.x, id.y + 20, blue_influence)

draw_text(id.x -30, id.y, building1)
draw_text(id.x - 30, id.y + 20, ai_building1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
